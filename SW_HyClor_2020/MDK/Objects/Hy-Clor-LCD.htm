<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Hy-Clor-LCD.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Hy-Clor-LCD.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Nov 10 18:07:05 2020
<BR><P>
<H3>Maximum Stack Usage =        192 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; LCDInspection &rArr; LCDDisplaySpecialNumber &rArr; DisplayACSIIString &rArr; LCD_Display8x16Graphic &rArr; ST756x_WriteData
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[43]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2d]">AdcContIrqCallback</a> from mcu.o(i.AdcContIrqCallback) referenced from mcu.o(i.Init_ADC)
 <LI><a href="#[31]">FlashInt</a> from ctrl.o(i.FlashInt) referenced from ctrl.o(i.SaveDataToArea)
 <LI><a href="#[7]">HardFault_Handler</a> from interrupts_hc32l136.o(i.HardFault_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[b]">IRQ000_Handler</a> from interrupts_hc32l136.o(i.IRQ000_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[c]">IRQ001_Handler</a> from interrupts_hc32l136.o(i.IRQ001_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[d]">IRQ002_Handler</a> from interrupts_hc32l136.o(i.IRQ002_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[e]">IRQ003_Handler</a> from interrupts_hc32l136.o(i.IRQ003_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[f]">IRQ004_Handler</a> from interrupts_hc32l136.o(i.IRQ004_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[10]">IRQ005_Handler</a> from interrupts_hc32l136.o(i.IRQ005_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[11]">IRQ006_Handler</a> from interrupts_hc32l136.o(i.IRQ006_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[12]">IRQ007_Handler</a> from interrupts_hc32l136.o(i.IRQ007_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[13]">IRQ008_Handler</a> from interrupts_hc32l136.o(i.IRQ008_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[14]">IRQ009_Handler</a> from interrupts_hc32l136.o(i.IRQ009_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[15]">IRQ010_Handler</a> from interrupts_hc32l136.o(i.IRQ010_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[16]">IRQ011_Handler</a> from interrupts_hc32l136.o(i.IRQ011_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[17]">IRQ012_Handler</a> from interrupts_hc32l136.o(i.IRQ012_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[18]">IRQ013_Handler</a> from interrupts_hc32l136.o(i.IRQ013_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[19]">IRQ014_Handler</a> from interrupts_hc32l136.o(i.IRQ014_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[1a]">IRQ015_Handler</a> from interrupts_hc32l136.o(i.IRQ015_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[1b]">IRQ016_Handler</a> from interrupts_hc32l136.o(i.IRQ016_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[1c]">IRQ017_Handler</a> from interrupts_hc32l136.o(i.IRQ017_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[1d]">IRQ018_Handler</a> from interrupts_hc32l136.o(i.IRQ018_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[1e]">IRQ019_Handler</a> from interrupts_hc32l136.o(i.IRQ019_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[1f]">IRQ020_Handler</a> from interrupts_hc32l136.o(i.IRQ020_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[20]">IRQ021_Handler</a> from interrupts_hc32l136.o(i.IRQ021_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[21]">IRQ022_Handler</a> from interrupts_hc32l136.o(i.IRQ022_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[22]">IRQ023_Handler</a> from interrupts_hc32l136.o(i.IRQ023_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[23]">IRQ024_Handler</a> from interrupts_hc32l136.o(i.IRQ024_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[24]">IRQ025_Handler</a> from interrupts_hc32l136.o(i.IRQ025_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[25]">IRQ026_Handler</a> from interrupts_hc32l136.o(i.IRQ026_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[26]">IRQ027_Handler</a> from interrupts_hc32l136.o(i.IRQ027_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[27]">IRQ028_Handler</a> from interrupts_hc32l136.o(i.IRQ028_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[28]">IRQ029_Handler</a> from interrupts_hc32l136.o(i.IRQ029_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[29]">IRQ030_Handler</a> from interrupts_hc32l136.o(i.IRQ030_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[2a]">IRQ031_Handler</a> from interrupts_hc32l136.o(i.IRQ031_Handler) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_hc32l136.o(.text) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_hc32l136.o(.text) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_hc32l136.o(.text) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_hc32l136.o(.text) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_hc32l136.o(.text) referenced from startup_hc32l136.o(RESET)
 <LI><a href="#[2b]">SystemInit</a> from system_hc32l136.o(i.SystemInit) referenced from startup_hc32l136.o(.text)
 <LI><a href="#[2e]">Tim0Int</a> from mcu.o(i.Tim0Int) referenced from mcu.o(i.Init_Timer)
 <LI><a href="#[2f]">Tim1Int</a> from mcu.o(i.Tim1Int) referenced from mcu.o(i.Init_Timer)
 <LI><a href="#[30]">Tim3Int</a> from mcu.o(i.Tim3Int) referenced from mcu.o(i.Init_Timer)
 <LI><a href="#[32]">__main</a> from __main.o(!!!main) referenced from startup_hc32l136.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[32]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[33]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[35]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[fb]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[fc]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[36]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[fd]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[3a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[fe]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[100]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[101]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[102]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[103]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[104]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[105]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[106]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[107]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[108]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[109]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[10a]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[10b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[10c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[10d]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[10e]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[10f]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[110]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[111]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[112]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[113]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[114]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[115]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[116]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[117]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[118]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[119]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[34]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[11a]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[37]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[39]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[11b]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; LCDInspection &rArr; LCDDisplaySpecialNumber &rArr; DisplayACSIIString &rArr; LCD_Display8x16Graphic &rArr; ST756x_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[11c]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[45]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[11d]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[40]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, startup_hc32l136.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l136.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l136.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l136.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32l136.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_hc32l136.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[11f]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCellRealCurrent
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellRealCurrentDisplay
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOutputCurrentAdjust
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateParameter
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateThresholdLimit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateConvertValue
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDDisplaySpecialNumber
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDDisplayNumberWithZero
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDDisplayNumber
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay100us
</UL>

<P><STRONG><a name="[121]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3d]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[128]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[129]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>ADCStart</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mcu.o(i.ADCStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADCStart
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_SGL_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim1Int
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler
</UL>

<P><STRONG><a name="[48]"></a>ADCStop</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, mcu.o(i.ADCStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADCStop
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_SGL_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentADCProcess
</UL>

<P><STRONG><a name="[4a]"></a>ALLStart</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mcu.o(i.ALLStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ALLStart &rArr; PWMStart &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMStart
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M0_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDataToArea
</UL>

<P><STRONG><a name="[4f]"></a>ALLStop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mcu.o(i.ALLStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ALLStop &rArr; PWMStop &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMStop
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M0_Stop
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_SGL_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDataToArea
</UL>

<P><STRONG><a name="[2d]"></a>AdcContIrqCallback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mcu.o(i.AdcContIrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AdcContIrqCallback &rArr; CurrentADCProcess &rArr; StopTimer1 &rArr; Bt_M0_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentADCProcess
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_GetSglResult
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcu.o(i.Init_ADC)
</UL>
<P><STRONG><a name="[ae]"></a>Adc_ConfigIrq</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, adc.o(i.Adc_ConfigIrq))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC
</UL>

<P><STRONG><a name="[ac]"></a>Adc_ConfigSglChannel</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, adc.o(i.Adc_ConfigSglChannel))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC
</UL>

<P><STRONG><a name="[ab]"></a>Adc_ConfigSglMode</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, adc.o(i.Adc_ConfigSglMode))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC
</UL>

<P><STRONG><a name="[a8]"></a>Adc_Enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.Adc_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC
</UL>

<P><STRONG><a name="[ad]"></a>Adc_EnableIrq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc.o(i.Adc_EnableIrq))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC
</UL>

<P><STRONG><a name="[52]"></a>Adc_GetSglResult</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, adc.o(i.Adc_GetSglResult))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcContIrqCallback
</UL>

<P><STRONG><a name="[9d]"></a>Adc_IRQHandler</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, adc.o(i.Adc_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Adc_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ024_Handler
</UL>

<P><STRONG><a name="[aa]"></a>Adc_Init</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, adc.o(i.Adc_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC
</UL>

<P><STRONG><a name="[47]"></a>Adc_SGL_Start</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(i.Adc_SGL_Start))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCStart
</UL>

<P><STRONG><a name="[49]"></a>Adc_SGL_Stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc.o(i.Adc_SGL_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALLStop
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCStop
</UL>

<P><STRONG><a name="[54]"></a>BoostModeHandler</STRONG> (Thumb, 368 bytes, Stack size 8 bytes, ctrl.o(i.BoostModeHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BoostModeHandler &rArr; CellOutputCurrentAdjust &rArr; SerivceReset &rArr; SaveDataToArea &rArr; ALLStop &rArr; PWMStop &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlashSetting
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControl
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModelRatingCurrent
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOutputCurrentAdjust
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellCurrentOutput
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateThresholdLimit
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHandler
</UL>

<P><STRONG><a name="[b8]"></a>Bt_ClearIntFlag</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, bt.o(i.Bt_ClearIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bt_ClearIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim1Int
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim0Int
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
</UL>

<P><STRONG><a name="[f8]"></a>Bt_GetIntFlag</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bt.o(i.Bt_GetIntFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Bt_GetIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim1Int
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim0Int
</UL>

<P><STRONG><a name="[b6]"></a>Bt_M0_ARRSet</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, bt.o(i.Bt_M0_ARRSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bt_M0_ARRSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
</UL>

<P><STRONG><a name="[b7]"></a>Bt_M0_Cnt16Set</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, bt.o(i.Bt_M0_Cnt16Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bt_M0_Cnt16Set
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
</UL>

<P><STRONG><a name="[4b]"></a>Bt_M0_Run</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bt.o(i.Bt_M0_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bt_M0_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALLStart
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer1
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
</UL>

<P><STRONG><a name="[50]"></a>Bt_M0_Stop</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bt.o(i.Bt_M0_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bt_M0_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopTimer1
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALLStop
</UL>

<P><STRONG><a name="[b9]"></a>Bt_Mode0_EnableIrq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bt.o(i.Bt_Mode0_EnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Bt_Mode0_EnableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
</UL>

<P><STRONG><a name="[b5]"></a>Bt_Mode0_Init</STRONG> (Thumb, 536 bytes, Stack size 12 bytes, bt.o(i.Bt_Mode0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Bt_Mode0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
</UL>

<P><STRONG><a name="[5c]"></a>CalculateConvertValue</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ctrl.o(i.CalculateConvertValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CalculateConvertValue
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChlorBoostProcess
</UL>

<P><STRONG><a name="[59]"></a>CalculateThresholdLimit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ctrl.o(i.CalculateThresholdLimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CalculateThresholdLimit
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOutputControl
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoostModeHandler
</UL>

<P><STRONG><a name="[5e]"></a>CalibrateParameter</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ctrl.o(i.CalibrateParameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CalibrateParameter
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHandler
</UL>

<P><STRONG><a name="[5f]"></a>CellCurrentCycleOutput</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, ctrl.o(i.CellCurrentCycleOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CellCurrentCycleOutput &rArr; PWMStop &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMStop
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMStart
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTimerHandler
</UL>

<P><STRONG><a name="[60]"></a>CellCurrentLED</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ctrl.o(i.CellCurrentLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CellCurrentLED &rArr; LEDControl
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControl
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseTimeSettingKeyProcess
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHandler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerupFunctionModeSelect
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelChangeLED
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellRealCurrentDisplay
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOutputCurrentAdjust
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOutputControl
</UL>

<P><STRONG><a name="[5a]"></a>CellCurrentOutput</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, ctrl.o(i.CellCurrentOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CellCurrentOutput &rArr; PWMStop &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMStop
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMStart
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaterFlowFaultProcess
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecialSecretCodeProcess
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOutputCurrentAdjust
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoostModeHandler
</UL>

<P><STRONG><a name="[61]"></a>CellOutputCalibration</STRONG> (Thumb, 450 bytes, Stack size 24 bytes, ctrl.o(i.CellOutputCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CellOutputCalibration &rArr; PWMStop &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMStop
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMStart
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHandler
</UL>

<P><STRONG><a name="[62]"></a>CellOutputControl</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ctrl.o(i.CellOutputControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CellOutputControl &rArr; CellCurrentLED &rArr; LEDControl
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModelRatingCurrent
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellCurrentLED
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateThresholdLimit
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnInitialize
</UL>

<P><STRONG><a name="[5b]"></a>CellOutputCurrentAdjust</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, ctrl.o(i.CellOutputCurrentAdjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CellOutputCurrentAdjust &rArr; SerivceReset &rArr; SaveDataToArea &rArr; ALLStop &rArr; PWMStop &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerivceReset
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCellCurrent
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlashSetting
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDDisplayHexValue
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControl
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellCurrentOutput
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellCurrentLED
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHandler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoostModeHandler
</UL>

<P><STRONG><a name="[67]"></a>CellPolarityControl</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, ctrl.o(i.CellPolarityControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CellPolarityControl &rArr; LEDFlashSetting &rArr; LEDControl
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ReadOutputIO
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlashSetting
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControl
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deley_us
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHandler
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnInitialize
</UL>

<P><STRONG><a name="[6b]"></a>CellPolarityReverse</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ctrl.o(i.CellPolarityReverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CellPolarityReverse
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eeprom_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHandler
</UL>

<P><STRONG><a name="[6d]"></a>CellRealCurrentDisplay</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ctrl.o(i.CellRealCurrentDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CellRealCurrentDisplay &rArr; LEDDisplayHexValue &rArr; LEDControl
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDDisplayHexValue
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellCurrentLED
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHandler
</UL>

<P><STRONG><a name="[6e]"></a>CellReverseForPCBTest</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, ctrl.o(i.CellReverseForPCBTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CellReverseForPCBTest
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTestModeFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnInitialize
</UL>

<P><STRONG><a name="[70]"></a>CheckWaterFlow</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ctrl.o(i.CheckWaterFlow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CheckWaterFlow
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHandler
</UL>

<P><STRONG><a name="[72]"></a>CheckWaterSaltLevel</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, ctrl.o(i.CheckWaterSaltLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CheckWaterSaltLevel &rArr; LEDFlashSetting &rArr; LEDControl
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlashSetting
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControl
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHandler
</UL>

<P><STRONG><a name="[73]"></a>ChlorBoostProcess</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ctrl.o(i.ChlorBoostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ChlorBoostProcess &rArr; LEDFlashSetting &rArr; LEDControl
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCalValueByDirection
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlashSetting
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControl
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateConvertValue
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComboKeyProcess
</UL>

<P><STRONG><a name="[7f]"></a>ClearRunningData</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ctrl.o(i.ClearRunningData))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FactoryReset
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromDataCheck
</UL>

<P><STRONG><a name="[75]"></a>ComboKeyProcess</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, ctrl.o(i.ComboKeyProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ComboKeyProcess &rArr; FactoryReset &rArr; SerivceReset &rArr; SaveDataToArea &rArr; ALLStop &rArr; PWMStop &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlashSetting
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControl
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FactoryReset
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChlorBoostProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHandler
</UL>

<P><STRONG><a name="[53]"></a>CurrentADCProcess</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ctrl.o(i.CurrentADCProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CurrentADCProcess &rArr; StopTimer1 &rArr; Bt_M0_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopTimer1
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCStop
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcContIrqCallback
</UL>

<P><STRONG><a name="[78]"></a>DataRangeCheck</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, ctrl.o(i.DataRangeCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DataRangeCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eeprom_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromDataCheck
</UL>

<P><STRONG><a name="[63]"></a>Delay_ms</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ctrl.o(i.Delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Delay_ms &rArr; delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInspection
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWVersionDisplay
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningLEDDisplay
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerupFunctionModeSelect
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnLED
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnInitialize
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComboKeyProcess
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellPolarityControl
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOutputCurrentAdjust
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOutputControl
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initialize
</UL>

<P><STRONG><a name="[6a]"></a>Deley_us</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ctrl.o(i.Deley_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Deley_us &rArr; delay10us
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellPolarityControl
</UL>

<P><STRONG><a name="[7b]"></a>DisplayACSIIString</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, display.o(i.DisplayACSIIString))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DisplayACSIIString &rArr; LCD_Display8x16Graphic &rArr; ST756x_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display8x16Graphic
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDDisplayString
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDDisplaySpecialNumber
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDDisplayNumberWithZero
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDDisplayNumber
</UL>

<P><STRONG><a name="[7d]"></a>EepromDataCheck</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, ctrl.o(i.EepromDataCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EepromDataCheck &rArr; SaveDataToArea &rArr; ALLStop &rArr; PWMStop &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateUserData
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRunningData
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetToDefault
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDataToArea
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWVersionDisplay
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eeprom_ReadBytes
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataRangeCheck
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRunningData
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnInitialize
</UL>

<P><STRONG><a name="[6c]"></a>Eeprom_ReadBytes</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ctrl.o(i.Eeprom_ReadBytes))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCellPolarity
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromDataCheck
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataRangeCheck
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellPolarityReverse
</UL>

<P><STRONG><a name="[4e]"></a>EnableNvic</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, interrupts_hc32l136.o(i.EnableNvic))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMStop
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMStart
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALLStart
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC
</UL>

<P><STRONG><a name="[76]"></a>FactoryReset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ctrl.o(i.FactoryReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FactoryReset &rArr; SerivceReset &rArr; SaveDataToArea &rArr; ALLStop &rArr; PWMStop &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateRunningData
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerivceReset
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDataToArea
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRunningData
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComboKeyProcess
</UL>

<P><STRONG><a name="[31]"></a>FlashInt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ctrl.o(i.FlashInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FlashInt &rArr; Flash_DisableIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_GetIntFlag
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_DisableIrq
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl.o(i.SaveDataToArea)
</UL>
<P><STRONG><a name="[86]"></a>Flash_ClearIntFlag</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, flash.o(i.Flash_ClearIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInt
</UL>

<P><STRONG><a name="[87]"></a>Flash_DisableIrq</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, flash.o(i.Flash_DisableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_DisableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInt
</UL>

<P><STRONG><a name="[85]"></a>Flash_GetIntFlag</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, flash.o(i.Flash_GetIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashInt
</UL>

<P><STRONG><a name="[e7]"></a>Flash_Init</STRONG> (Thumb, 672 bytes, Stack size 16 bytes, flash.o(i.Flash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Flash_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDataToArea
</UL>

<P><STRONG><a name="[e8]"></a>Flash_SectorErase</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, flash.o(i.Flash_SectorErase))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDataToArea
</UL>

<P><STRONG><a name="[b1]"></a>Flash_WaitCycle</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, flash.o(i.Flash_WaitCycle))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_OscFrequency
</UL>

<P><STRONG><a name="[e9]"></a>Flash_WriteByte</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, flash.o(i.Flash_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDataToArea
</UL>

<P><STRONG><a name="[88]"></a>GetCellRealCurrent</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, ctrl.o(i.GetCellRealCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetCellRealCurrent
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHandler
</UL>

<P><STRONG><a name="[58]"></a>GetModelRatingCurrent</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, ctrl.o(i.GetModelRatingCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOutputControl
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoostModeHandler
</UL>

<P><STRONG><a name="[8d]"></a>Gpio_ClearIrq</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(i.Gpio_ClearIrq))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMStop
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IOPorts
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler
</UL>

<P><STRONG><a name="[69]"></a>Gpio_ClrIO</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(i.Gpio_ClrIO))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControl
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDALLControl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellPolarityControl
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST756x_WriteData
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST756x_WriteCommand
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initialize
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3Int
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IOPorts
</UL>

<P><STRONG><a name="[89]"></a>Gpio_EnableIrq</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gpio.o(i.Gpio_EnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Gpio_EnableIrq &rArr; _GpioEnableIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GpioEnableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IOPorts
</UL>

<P><STRONG><a name="[71]"></a>Gpio_GetInputIO</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(i.Gpio_GetInputIO))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWaterFlow
</UL>

<P><STRONG><a name="[8c]"></a>Gpio_GetIrqStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(i.Gpio_GetIrqStatus))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>Gpio_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, mcu.o(i.Gpio_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Gpio_IRQHandler &rArr; StartTimer1 &rArr; Bt_M0_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_M0_Run
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_M0_Cnt16Set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_M0_ARRSet
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetIrqStatus
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClearIrq
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTimer1
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCStart
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ003_Handler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ002_Handler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ001_Handler
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ000_Handler
</UL>

<P><STRONG><a name="[a6]"></a>Gpio_Init</STRONG> (Thumb, 300 bytes, Stack size 12 bytes, gpio.o(i.Gpio_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Gpio_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IOPorts
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC
</UL>

<P><STRONG><a name="[68]"></a>Gpio_ReadOutputIO</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(i.Gpio_ReadOutputIO))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellPolarityControl
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3Int
</UL>

<P><STRONG><a name="[a5]"></a>Gpio_SetAnalogMode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(i.Gpio_SetAnalogMode))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC
</UL>

<P><STRONG><a name="[4d]"></a>Gpio_SetIO</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gpio.o(i.Gpio_SetIO))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALLStop
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALLStart
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControl
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDALLControl
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellPolarityControl
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOutputCalibration
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellCurrentOutput
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellCurrentCycleOutput
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST756x_WriteData
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST756x_WriteCommand
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initialize
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3Int
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IOPorts
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler
</UL>

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>IRQ000_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ000_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IRQ000_Handler &rArr; Gpio_IRQHandler &rArr; StartTimer1 &rArr; Bt_M0_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>IRQ001_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ001_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IRQ001_Handler &rArr; Gpio_IRQHandler &rArr; StartTimer1 &rArr; Bt_M0_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>IRQ002_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ002_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IRQ002_Handler &rArr; Gpio_IRQHandler &rArr; StartTimer1 &rArr; Bt_M0_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>IRQ003_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ003_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IRQ003_Handler &rArr; Gpio_IRQHandler &rArr; StartTimer1 &rArr; Bt_M0_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>IRQ004_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ004_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ004_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dma_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>IRQ005_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ005_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ005_Handler &rArr; Tim3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>IRQ006_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ006_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ006_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>IRQ007_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ007_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ007_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>IRQ008_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ008_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ008_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUart_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>IRQ009_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ009_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ009_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpUart_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>IRQ010_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ010_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ010_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>IRQ011_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ011_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ011_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Spi_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>IRQ012_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ012_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ012_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>IRQ013_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ013_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ013_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2c_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>IRQ014_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ014_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ014_Handler &rArr; Tim_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>IRQ015_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ015_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ015_Handler &rArr; Tim_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>IRQ016_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ016_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ016_Handler &rArr; Tim_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>IRQ017_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ017_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ017_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LpTim_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>IRQ018_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ018_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ018_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adt_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>IRQ019_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ019_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ019_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adt_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>IRQ020_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ020_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ020_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adt_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>IRQ021_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ021_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ021_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pca_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>IRQ022_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ022_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ022_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Wdt_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>IRQ023_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ023_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ023_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rtc_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>IRQ024_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ024_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IRQ024_Handler &rArr; Adc_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>IRQ025_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ025_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ025_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pcnt_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>IRQ026_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ026_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ026_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vc_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>IRQ027_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ027_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ027_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vc_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>IRQ028_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ028_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ028_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lvd_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IRQ029_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ029_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ029_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IRQ030_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ030_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ030_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IRQ031_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.IRQ031_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ031_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClkTrim_IRQHandler (Weak Reference)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>Init_ADC</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, mcu.o(i.Init_ADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Init_ADC &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay100us
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetAnalogMode
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_EnableIrq
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_Enable
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_ConfigSglMode
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_ConfigSglChannel
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adc_ConfigIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Initialize
</UL>

<P><STRONG><a name="[af]"></a>Init_IOPorts</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, mcu.o(i.Init_IOPorts))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Init_IOPorts &rArr; Gpio_EnableIrq &rArr; _GpioEnableIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_EnableIrq
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClearIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Initialize
</UL>

<P><STRONG><a name="[b0]"></a>Init_OscFrequency</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mcu.o(i.Init_OscFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Init_OscFrequency &rArr; Sysctrl_ClkInit &rArr; Sysctrl_SysClkSwitch &rArr; SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetRCHTrim
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WaitCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Initialize
</UL>

<P><STRONG><a name="[b4]"></a>Init_Timer</STRONG> (Thumb, 278 bytes, Stack size 64 bytes, mcu.o(i.Init_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Init_Timer &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ddl_memclr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_Mode0_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_M0_Cnt16Set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_M0_ARRSet
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_ClearIntFlag
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPeripheralGate
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_Mode0_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_Mode0_EnableIrq
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M0_Run
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M0_Cnt16Set
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M0_ARRSet
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_ClearIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Initialize
</UL>

<P><STRONG><a name="[bc]"></a>KeyDetect</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, keypad.o(i.KeyDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KeyDetect &rArr; KeyScanStatus &rArr; ReadKey
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHandler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerupFunctionModeSelect
</UL>

<P><STRONG><a name="[f9]"></a>KeyDetectTimer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, keypad.o(i.KeyDetectTimer))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim0Int
</UL>

<P><STRONG><a name="[be]"></a>KeyHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, keypad.o(i.KeyHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = KeyHandler &rArr; CellOutputCurrentAdjust &rArr; SerivceReset &rArr; SaveDataToArea &rArr; ALLStop &rArr; PWMStop &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDetect
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecialSecretCodeProcess
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComboKeyProcess
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOutputCurrentAdjust
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>KeyScanStatus</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, keypad.o(i.KeyScanStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KeyScanStatus &rArr; ReadKey
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadKey
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDetect
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerupFunctionModeSelect
</UL>

<P><STRONG><a name="[d8]"></a>KeyVariableInitial</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, keypad.o(i.KeyVariableInitial))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnInitialize
</UL>

<P><STRONG><a name="[c1]"></a>LCDDisplayNumber</STRONG> (Thumb, 398 bytes, Stack size 72 bytes, display.o(i.LCDDisplayNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LCDDisplayNumber &rArr; DisplayACSIIString &rArr; LCD_Display8x16Graphic &rArr; ST756x_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayACSIIString
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInspection
</UL>

<P><STRONG><a name="[c2]"></a>LCDDisplayNumberWithZero</STRONG> (Thumb, 244 bytes, Stack size 72 bytes, display.o(i.LCDDisplayNumberWithZero))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LCDDisplayNumberWithZero &rArr; DisplayACSIIString &rArr; LCD_Display8x16Graphic &rArr; ST756x_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayACSIIString
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInspection
</UL>

<P><STRONG><a name="[c3]"></a>LCDDisplaySpecialNumber</STRONG> (Thumb, 280 bytes, Stack size 80 bytes, display.o(i.LCDDisplaySpecialNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LCDDisplaySpecialNumber &rArr; DisplayACSIIString &rArr; LCD_Display8x16Graphic &rArr; ST756x_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayACSIIString
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInspection
</UL>

<P><STRONG><a name="[c4]"></a>LCDDisplayString</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, display.o(i.LCDDisplayString))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LCDDisplayString &rArr; DisplayACSIIString &rArr; LCD_Display8x16Graphic &rArr; ST756x_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayACSIIString
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInspection
</UL>

<P><STRONG><a name="[c5]"></a>LCDInitialize</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, display.o(i.LCDInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCDInitialize &rArr; LCD_Initialize &rArr; Delay_ms &rArr; delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initialize
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearScreen
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>LCDInspection</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, display.o(i.LCDInspection))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LCDInspection &rArr; LCDDisplaySpecialNumber &rArr; DisplayACSIIString &rArr; LCD_Display8x16Graphic &rArr; ST756x_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initialize
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayLattice
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearScreen
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDDisplayString
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDDisplaySpecialNumber
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDDisplayNumberWithZero
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDDisplayNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>LCD_ClearScreen</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, st7565r.o(i.LCD_ClearScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_ClearScreen &rArr; ST756x_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST756x_WriteData
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST756x_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInspection
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInitialize
</UL>

<P><STRONG><a name="[7c]"></a>LCD_Display8x16Graphic</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, st7565r.o(i.LCD_Display8x16Graphic))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_Display8x16Graphic &rArr; ST756x_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST756x_WriteData
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST756x_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayACSIIString
</UL>

<P><STRONG><a name="[c9]"></a>LCD_DisplayLattice</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, st7565r.o(i.LCD_DisplayLattice))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_DisplayLattice &rArr; ST756x_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST756x_WriteData
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST756x_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInspection
</UL>

<P><STRONG><a name="[c6]"></a>LCD_Initialize</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, st7565r.o(i.LCD_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_Initialize &rArr; Delay_ms &rArr; delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST756x_WriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInspection
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInitialize
</UL>

<P><STRONG><a name="[cc]"></a>LEDALLControl</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, ctrl.o(i.LEDALLControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LEDALLControl
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecialSecretCodeProcess
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningTimeKeyProcess
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningLEDDisplay
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerupFunctionModeSelect
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnInitialize
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOffLED
</UL>

<P><STRONG><a name="[56]"></a>LEDControl</STRONG> (Thumb, 420 bytes, Stack size 16 bytes, ctrl.o(i.LEDControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LEDControl
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaterFlowFaultProcess
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWVersionDisplay
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningLEDDisplay
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseLEDDisplay
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerupFunctionModeSelect
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelChangeLED
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlashSetting
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlashDisplay
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDDisplayHexValue
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComboKeyProcess
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChlorBoostProcess
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWaterSaltLevel
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellPolarityControl
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOutputCurrentAdjust
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellCurrentLED
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoostModeHandler
</UL>

<P><STRONG><a name="[65]"></a>LEDDisplayHexValue</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ctrl.o(i.LEDDisplayHexValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LEDDisplayHexValue &rArr; LEDControl
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControl
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellRealCurrentDisplay
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOutputCurrentAdjust
</UL>

<P><STRONG><a name="[cd]"></a>LEDFlashDisplay</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ctrl.o(i.LEDFlashDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LEDFlashDisplay &rArr; LEDControl
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControl
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHandler
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerupFunctionModeSelect
</UL>

<P><STRONG><a name="[57]"></a>LEDFlashSetting</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ctrl.o(i.LEDFlashSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LEDFlashSetting &rArr; LEDControl
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControl
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaterFlowFaultProcess
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpecialSecretCodeProcess
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerupFunctionModeSelect
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComboKeyProcess
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChlorBoostProcess
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWaterSaltLevel
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellPolarityControl
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOutputCurrentAdjust
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoostModeHandler
</UL>

<P><STRONG><a name="[ce]"></a>MCU_Initialize</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mcu.o(i.MCU_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MCU_Initialize &rArr; Init_OscFrequency &rArr; Sysctrl_ClkInit &rArr; Sysctrl_SysClkSwitch &rArr; SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay10us
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_OscFrequency
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IOPorts
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>MainTimerHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ctrl.o(i.MainTimerHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MainTimerHandler &rArr; CellCurrentCycleOutput &rArr; PWMStop &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellCurrentCycleOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim0Int
</UL>

<P><STRONG><a name="[d0]"></a>ModelChangeLED</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ctrl.o(i.ModelChangeLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ModelChangeLED &rArr; CellCurrentLED &rArr; LEDControl
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControl
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellCurrentLED
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerupFunctionModeSelect
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelSelectKeyProcess
</UL>

<P><STRONG><a name="[d1]"></a>ModelSelectKeyProcess</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ctrl.o(i.ModelSelectKeyProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ModelSelectKeyProcess &rArr; SaveModelNumber &rArr; SaveDataToArea &rArr; ALLStop &rArr; PWMStop &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveModelNumber
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelChangeLED
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerupFunctionModeSelect
</UL>

<P><STRONG><a name="[4c]"></a>PWMStart</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mcu.o(i.PWMStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PWMStart &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_Mode0_EnableIrq
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_ClearIntFlag
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALLStart
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOutputCalibration
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellCurrentOutput
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellCurrentCycleOutput
</UL>

<P><STRONG><a name="[51]"></a>PWMStop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, mcu.o(i.PWMStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PWMStop &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_Mode0_DisableIrq
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_M0_Stop
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_ClearIntFlag
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClearIrq
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALLStop
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOutputCalibration
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellCurrentOutput
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellCurrentCycleOutput
</UL>

<P><STRONG><a name="[d6]"></a>PowerOffLED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ctrl.o(i.PowerOffLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PowerOffLED &rArr; LEDALLControl
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDALLControl
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerupFunctionModeSelect
</UL>

<P><STRONG><a name="[d7]"></a>PowerOnInitialize</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ctrl.o(i.PowerOnInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PowerOnInitialize &rArr; PowerupFunctionModeSelect &rArr; ReverseTimeSettingKeyProcess &rArr; SaveCellReverseSetting &rArr; SaveDataToArea &rArr; ALLStop &rArr; PWMStop &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyVariableInitial
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerupFunctionModeSelect
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDALLControl
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromDataCheck
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellReverseForPCBTest
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellPolarityControl
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOutputControl
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>PowerOnLED</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ctrl.o(i.PowerOnLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PowerOnLED &rArr; ReverseLEDDisplay &rArr; LEDControl
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseLEDDisplay
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerupFunctionModeSelect
</UL>

<P><STRONG><a name="[d9]"></a>PowerupFunctionModeSelect</STRONG> (Thumb, 434 bytes, Stack size 16 bytes, ctrl.o(i.PowerupFunctionModeSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = PowerupFunctionModeSelect &rArr; ReverseTimeSettingKeyProcess &rArr; SaveCellReverseSetting &rArr; SaveDataToArea &rArr; ALLStop &rArr; PWMStop &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanStatus
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDetect
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCellReverseSetting
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWVersionDisplay
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningTimeKeyProcess
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningLEDDisplay
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseTimeSettingKeyProcess
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnLED
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOffLED
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelSelectKeyProcess
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelChangeLED
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlashSetting
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlashDisplay
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControl
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDALLControl
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellCurrentLED
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnInitialize
</UL>

<P><STRONG><a name="[e0]"></a>ProcessHandler</STRONG> (Thumb, 528 bytes, Stack size 8 bytes, ctrl.o(i.ProcessHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ProcessHandler &rArr; BoostModeHandler &rArr; CellOutputCurrentAdjust &rArr; SerivceReset &rArr; SaveDataToArea &rArr; ALLStop &rArr; PWMStop &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaterFlowFaultProcess
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveTestModeFlag
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEventProcess
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCellRunningTime
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCellRunningMinutes
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCellReverseTime
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCellPolarity
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlashDisplay
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetModelRatingCurrent
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCellRealCurrent
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWaterSaltLevel
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckWaterFlow
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellRealCurrentDisplay
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellPolarityReverse
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellPolarityControl
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOutputCurrentAdjust
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOutputCalibration
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellCurrentOutput
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellCurrentLED
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibrateParameter
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculateThresholdLimit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoostModeHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>ReadCellPolarity</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, ctrl.o(i.ReadCellPolarity))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ReadCellPolarity
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Eeprom_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHandler
</UL>

<P><STRONG><a name="[c0]"></a>ReadKey</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, keypad.o(i.ReadKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadKey
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_GetInputIO
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanStatus
</UL>

<P><STRONG><a name="[db]"></a>ReverseLEDDisplay</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ctrl.o(i.ReverseLEDDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReverseLEDDisplay &rArr; LEDControl
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControl
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnLED
</UL>

<P><STRONG><a name="[dd]"></a>ReverseTimeSettingKeyProcess</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ctrl.o(i.ReverseTimeSettingKeyProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ReverseTimeSettingKeyProcess &rArr; SaveCellReverseSetting &rArr; SaveDataToArea &rArr; ALLStop &rArr; PWMStop &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCellReverseSetting
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellCurrentLED
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerupFunctionModeSelect
</UL>

<P><STRONG><a name="[df]"></a>RunningLEDDisplay</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, ctrl.o(i.RunningLEDDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RunningLEDDisplay &rArr; Delay_ms &rArr; delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControl
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDALLControl
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerupFunctionModeSelect
</UL>

<P><STRONG><a name="[de]"></a>RunningTimeKeyProcess</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, ctrl.o(i.RunningTimeKeyProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RunningTimeKeyProcess &rArr; LEDALLControl
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCellRunningTime
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDALLControl
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerupFunctionModeSelect
</UL>

<P><STRONG><a name="[ca]"></a>ST756x_WriteCommand</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, st7565r.o(i.ST756x_WriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ST756x_WriteCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Initialize
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayLattice
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display8x16Graphic
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearScreen
</UL>

<P><STRONG><a name="[cb]"></a>ST756x_WriteData</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, st7565r.o(i.ST756x_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ST756x_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayLattice
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display8x16Graphic
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ClearScreen
</UL>

<P><STRONG><a name="[82]"></a>SWVersionDisplay</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, ctrl.o(i.SWVersionDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SWVersionDisplay &rArr; Delay_ms &rArr; delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControl
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerupFunctionModeSelect
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromDataCheck
</UL>

<P><STRONG><a name="[74]"></a>SaveCalValueByDirection</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ctrl.o(i.SaveCalValueByDirection))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChlorBoostProcess
</UL>

<P><STRONG><a name="[66]"></a>SaveCellCurrent</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ctrl.o(i.SaveCellCurrent))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOutputCurrentAdjust
</UL>

<P><STRONG><a name="[dc]"></a>SaveCellReverseSetting</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ctrl.o(i.SaveCellReverseSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SaveCellReverseSetting &rArr; SaveDataToArea &rArr; ALLStop &rArr; PWMStop &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDataToArea
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseTimeSettingKeyProcess
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerupFunctionModeSelect
</UL>

<P><STRONG><a name="[e3]"></a>SaveCellReverseTime</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ctrl.o(i.SaveCellReverseTime))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHandler
</UL>

<P><STRONG><a name="[e5]"></a>SaveCellRunningMinutes</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ctrl.o(i.SaveCellRunningMinutes))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHandler
</UL>

<P><STRONG><a name="[e4]"></a>SaveCellRunningTime</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ctrl.o(i.SaveCellRunningTime))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RunningTimeKeyProcess
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHandler
</UL>

<P><STRONG><a name="[7e]"></a>SaveDataToArea</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, ctrl.o(i.SaveDataToArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SaveDataToArea &rArr; ALLStop &rArr; PWMStop &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_WriteByte
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_SectorErase
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALLStop
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALLStart
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerivceReset
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveModelNumber
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveEventProcess
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCellReverseSetting
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FactoryReset
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromDataCheck
</UL>

<P><STRONG><a name="[e6]"></a>SaveEventProcess</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, ctrl.o(i.SaveEventProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SaveEventProcess &rArr; SaveDataToArea &rArr; ALLStop &rArr; PWMStop &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDataToArea
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHandler
</UL>

<P><STRONG><a name="[d2]"></a>SaveModelNumber</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ctrl.o(i.SaveModelNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SaveModelNumber &rArr; SaveDataToArea &rArr; ALLStop &rArr; PWMStop &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDataToArea
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModelSelectKeyProcess
</UL>

<P><STRONG><a name="[6f]"></a>SaveTestModeFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ctrl.o(i.SaveTestModeFlag))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHandler
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellReverseForPCBTest
</UL>

<P><STRONG><a name="[64]"></a>SerivceReset</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ctrl.o(i.SerivceReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SerivceReset &rArr; SaveDataToArea &rArr; ALLStop &rArr; PWMStop &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateUserData
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetToDefault
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveDataToArea
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FactoryReset
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellOutputCurrentAdjust
</UL>

<P><STRONG><a name="[81]"></a>SetToDefault</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ctrl.o(i.SetToDefault))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerivceReset
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromDataCheck
</UL>

<P><STRONG><a name="[bf]"></a>SpecialSecretCodeProcess</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, ctrl.o(i.SpecialSecretCodeProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SpecialSecretCodeProcess &rArr; CellCurrentOutput &rArr; PWMStop &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlashSetting
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDALLControl
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellCurrentOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHandler
</UL>

<P><STRONG><a name="[91]"></a>StartTimer1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mcu.o(i.StartTimer1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StartTimer1 &rArr; Bt_M0_Run
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M0_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler
</UL>

<P><STRONG><a name="[77]"></a>StopTimer1</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mcu.o(i.StopTimer1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StopTimer1 &rArr; Bt_M0_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_M0_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CurrentADCProcess
</UL>

<P><STRONG><a name="[b3]"></a>Sysctrl_ClkInit</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sysctrl.o(i.Sysctrl_ClkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Sysctrl_ClkInit &rArr; Sysctrl_SysClkSwitch &rArr; SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_XTLDriverConfig
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_XTHDriverConfig
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetXTLStableTime
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetXTHStableTime
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetRCLStableTime
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPLLStableTime
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPCLKDiv
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetHCLKDiv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_OscFrequency
</UL>

<P><STRONG><a name="[f0]"></a>Sysctrl_ClkSourceEnable</STRONG> (Thumb, 312 bytes, Stack size 16 bytes, sysctrl.o(i.Sysctrl_ClkSourceEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sysctrl_ClkSourceEnable &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[f5]"></a>Sysctrl_GetHClkFreq</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, sysctrl.o(i.Sysctrl_GetHClkFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[f2]"></a>Sysctrl_SetHCLKDiv</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sysctrl.o(i.Sysctrl_SetHCLKDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sysctrl_SetHCLKDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[f3]"></a>Sysctrl_SetPCLKDiv</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sysctrl.o(i.Sysctrl_SetPCLKDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sysctrl_SetPCLKDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[ef]"></a>Sysctrl_SetPLLStableTime</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetPLLStableTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetPLLStableTime
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[a7]"></a>Sysctrl_SetPeripheralGate</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetPeripheralGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetPeripheralGate
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IOPorts
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC
</UL>

<P><STRONG><a name="[b2]"></a>Sysctrl_SetRCHTrim</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetRCHTrim))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Sysctrl_SetRCHTrim &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_OscFrequency
</UL>

<P><STRONG><a name="[ec]"></a>Sysctrl_SetRCLStableTime</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetRCLStableTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetRCLStableTime
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[eb]"></a>Sysctrl_SetXTHStableTime</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetXTHStableTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetXTHStableTime
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[ee]"></a>Sysctrl_SetXTLStableTime</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sysctrl.o(i.Sysctrl_SetXTLStableTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sysctrl_SetXTLStableTime
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[f1]"></a>Sysctrl_SysClkSwitch</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sysctrl.o(i.Sysctrl_SysClkSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Sysctrl_SysClkSwitch &rArr; SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SysctrlUnlock
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[ea]"></a>Sysctrl_XTHDriverConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sysctrl.o(i.Sysctrl_XTHDriverConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[ed]"></a>Sysctrl_XTLDriverConfig</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, sysctrl.o(i.Sysctrl_XTLDriverConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Sysctrl_XTLDriverConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
</UL>

<P><STRONG><a name="[f7]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system_hc32l136.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
</UL>

<P><STRONG><a name="[2b]"></a>SystemInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, system_hc32l136.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate &rArr; Sysctrl_GetHClkFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32l136.o(.text)
</UL>
<P><STRONG><a name="[2e]"></a>Tim0Int</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, mcu.o(i.Tim0Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Tim0Int &rArr; MainTimerHandler &rArr; CellCurrentCycleOutput &rArr; PWMStop &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyDetectTimer
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainTimerHandler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_GetIntFlag
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcu.o(i.Init_Timer)
</UL>
<P><STRONG><a name="[2f]"></a>Tim1Int</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mcu.o(i.Tim1Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Tim1Int &rArr; Bt_GetIntFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_GetIntFlag
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bt_ClearIntFlag
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADCStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcu.o(i.Init_Timer)
</UL>
<P><STRONG><a name="[30]"></a>Tim3Int</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, mcu.o(i.Tim3Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Tim3Int
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_SetIO
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ReadOutputIO
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_ClrIO
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_M0_Cnt16Set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_M0_ARRSet
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_GetIntFlag
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3_ClearIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcu.o(i.Init_Timer)
</UL>
<P><STRONG><a name="[bb]"></a>Tim3_ClearIntFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer3.o(i.Tim3_ClearIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMStop
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMStart
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3Int
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
</UL>

<P><STRONG><a name="[fa]"></a>Tim3_GetIntFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer3.o(i.Tim3_GetIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3Int
</UL>

<P><STRONG><a name="[93]"></a>Tim3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timer3.o(i.Tim3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Tim3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ005_Handler
</UL>

<P><STRONG><a name="[8f]"></a>Tim3_M0_ARRSet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timer3.o(i.Tim3_M0_ARRSet))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3Int
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>Tim3_M0_Cnt16Set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timer3.o(i.Tim3_M0_Cnt16Set))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tim3Int
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>Tim3_M0_Run</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer3.o(i.Tim3_M0_Run))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>Tim3_M0_Stop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer3.o(i.Tim3_M0_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMStop
</UL>

<P><STRONG><a name="[d4]"></a>Tim3_Mode0_DisableIrq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer3.o(i.Tim3_Mode0_DisableIrq))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMStop
</UL>

<P><STRONG><a name="[d3]"></a>Tim3_Mode0_EnableIrq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer3.o(i.Tim3_Mode0_EnableIrq))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWMStart
</UL>

<P><STRONG><a name="[ba]"></a>Tim3_Mode0_Init</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, timer3.o(i.Tim3_Mode0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Tim3_Mode0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
</UL>

<P><STRONG><a name="[97]"></a>Tim_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, bt.o(i.Tim_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Tim_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ016_Handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ015_Handler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ014_Handler
</UL>

<P><STRONG><a name="[80]"></a>UpdateRunningData</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ctrl.o(i.UpdateRunningData))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FactoryReset
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromDataCheck
</UL>

<P><STRONG><a name="[83]"></a>UpdateUserData</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, ctrl.o(i.UpdateUserData))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerivceReset
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromDataCheck
</UL>

<P><STRONG><a name="[e1]"></a>WaterFlowFaultProcess</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, ctrl.o(i.WaterFlowFaultProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = WaterFlowFaultProcess &rArr; CellCurrentOutput &rArr; PWMStop &rArr; EnableNvic &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDFlashSetting
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDControl
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CellCurrentOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHandler
</UL>

<P><STRONG><a name="[55]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ctrl.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoostModeHandler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_GetHClkFreq
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetRCHTrim
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
</UL>

<P><STRONG><a name="[41]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ddl.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[a4]"></a>ddl_memclr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ddl.o(i.ddl_memclr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ddl_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_Timer
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_IOPorts
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC
</UL>

<P><STRONG><a name="[a9]"></a>delay100us</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ddl.o(i.delay100us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay100us
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_ADC
</UL>

<P><STRONG><a name="[7a]"></a>delay10us</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ddl.o(i.delay10us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay10us
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Initialize
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Deley_us
</UL>

<P><STRONG><a name="[79]"></a>delay1ms</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ddl.o(i.delay1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[3c]"></a>main</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = main &rArr; LCDInspection &rArr; LCDDisplaySpecialNumber &rArr; DisplayACSIIString &rArr; LCD_Display8x16Graphic &rArr; ST756x_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_Initialize
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInspection
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCDInitialize
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyHandler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHandler
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PowerOnInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8a]"></a>_GpioEnableIrq</STRONG> (Thumb, 208 bytes, Stack size 12 bytes, gpio.o(i._GpioEnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _GpioEnableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gpio_EnableIrq
</UL>

<P><STRONG><a name="[84]"></a>__NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, interrupts_hc32l136.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableNvic
</UL>

<P><STRONG><a name="[f4]"></a>_SysctrlUnlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysctrl.o(i._SysctrlUnlock))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SysClkSwitch
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetPCLKDiv
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_SetHCLKDiv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysctrl_ClkSourceEnable
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[99]"></a>Adt_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ020_Handler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ019_Handler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ018_Handler
</UL>

<P><STRONG><a name="[a2]"></a>ClkTrim_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ031_Handler
</UL>

<P><STRONG><a name="[92]"></a>Dma_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ004_Handler
</UL>

<P><STRONG><a name="[96]"></a>I2c_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ013_Handler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ012_Handler
</UL>

<P><STRONG><a name="[a1]"></a>Lcd_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ029_Handler
</UL>

<P><STRONG><a name="[98]"></a>LpTim_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ017_Handler
</UL>

<P><STRONG><a name="[94]"></a>LpUart_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ009_Handler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ008_Handler
</UL>

<P><STRONG><a name="[a0]"></a>Lvd_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ028_Handler
</UL>

<P><STRONG><a name="[9a]"></a>Pca_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ021_Handler
</UL>

<P><STRONG><a name="[9e]"></a>Pcnt_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ025_Handler
</UL>

<P><STRONG><a name="[9c]"></a>Rtc_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ023_Handler
</UL>

<P><STRONG><a name="[95]"></a>Spi_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ011_Handler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ010_Handler
</UL>

<P><STRONG><a name="[9f]"></a>Vc_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ027_Handler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ026_Handler
</UL>

<P><STRONG><a name="[9b]"></a>Wdt_IRQHandler</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ022_Handler
</UL>

<P><STRONG><a name="[44]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
